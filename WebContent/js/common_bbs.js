// 중복 서브 및 방지var submitDone = false;// IE 체크var isIE='\v'=='v';//콘솔로그 정의if( typeof CONSOLE == "undefined")	CONSOLE = {};var _isDebugMode=false; //console.log 사용여부CONSOLE.log = function(str){			if(_isDebugMode && typeof console != "undefined"){		console.log(str);	         				} };	// IE 버전체크function getInternetExplorerVersion() {    var rv = -1; // Return value assumes failure.    if (navigator.appName == 'Microsoft Internet Explorer') {        var ua = navigator.userAgent;        var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");        if (re.exec(ua) != null)            rv = parseFloat(RegExp.$1);    }    return rv;}// 전송function doSubmit(formObj, servlet_name, target_name){	if(submitDone){		alert("데이터를 처리중입니다.");		return;	}	if (target_name == null)	formObj.target = "_self";	else						formObj.target = target_name;	if (servlet_name != null)	formObj.action = servlet_name;	formObj.method = 'post';	submitDone = true;
	formObj.submit();
}
function doSubmitNewWin( sizeW, sizeH, formObj, servlet_name, target) {	var nLeft  = screen.width/2 - sizeW/2 ;	var nTop  = screen.height/2 - sizeH/2 ;	opt = ",toolbar=no,menubar=no,location=no,scrollbars=yes,status=no";	var winObj = window.open('', winName, "left=" + nLeft + ",top=" +  nTop + ",width=" + sizeW + ",height=" + sizeH  + opt );	doSubmit(formObj, servlet_name, target);	return winObj;}function initSubmit() {	submitDone = false;}// 페이지 이동function movePage(formID, pageNo) {	try {		var formObj = document.getElementById(formID);		if (isIE && getInternetExplorerVersion() < 8.0) {			formObj.page_no.value = pageNo;		} else {			if (formObj.page_no == null) {				addChildObject(formObj, "hidden", "page_no", pageNo);			} else {				formObj.page_no.value = pageNo;			}		}		doSubmit(formObj);	} catch(e) {		alert(e);	}}
//리스트 하단의 페이지 네비게이션function printPageNavigation(pageNavi, objectID, formID, pageNo) {	if (pageNavi == null)	return;	if (pageNo == null)		return;	try {		var naviObj = document.getElementById(objectID);		naviObj.innerHTML = "";		//		if (pageNavi.first!=null)//			naviObj.innerHTML += '<li><a href="#here" onClick="movePage(\''+formID+'\', '+pageNavi.prev+')">&lt;</a></li>';		if (pageNavi.page_list.length<=10){			naviObj.innerHTML += '<li><a href="#here" onClick="movePage(\''+formID+'\', '+1+')">&lt;</a></li>';		}else if(pageNavi.page_list.length>10){				naviObj.innerHTML += '<li><a href="#here" onClick="movePage(\''+formID+'\', '+(pageNavi.page_list.length)+')">&lt;</a></li>';		}//			naviObj.innerHTML += '<li><a href="#here" class="prev" style="margin-right:10px;" onClick="movePage(\''+formID+'\', '+pageNavi.prev+')">Prev</a></li>';//		if (pageNavi.prev!=null){//			naviObj.innerHTML += '<a href="#here" class="prev" style="margin-right:10px;" onClick="movePage(\''+formID+'\', '+pageNavi.prev+')">Prev</a>';//		}		for (var i = 0; pageNavi.page_list!=null && i<pageNavi.page_list.length; i++) {			if (pageNo == pageNavi.page_list[i]){//				naviObj.innerHTML += '<li class="active"><a href="#here">'+pageNavi.page_list[i]+'</a></li>';				naviObj.innerHTML += '<li class="selected"><a href="#here"><span>'+pageNavi.page_list[i]+'</span></a></li>';			}			else{//				naviObj.innerHTML += '<li><a href="#here" onClick="movePage(\''+formID+'\', '+pageNavi.page_list[i]+')">'//				+pageNavi.page_list[i]+'</a></li>';				naviObj.innerHTML += '<li><a href="#here" onClick="movePage(\''+formID+'\', '+pageNavi.page_list[i]+')">'				+pageNavi.page_list[i]+'</a></li>';			}		}//		if (pageNavi.next!=null){	//			naviObj.innerHTML += '<li><a href="#here" class="next" style="margin-left:10px;" onClick="movePage(\''+formID+'\', '+pageNavi.next+')">Next</a></li>';//		}		if (pageNavi.last!=null)			naviObj.innerHTML += '<li><a href="#here" onClick="movePage(\''+formID+'\', '+pageNavi.last+')">&gt;</a></li>';//			naviObj.innerHTML += '<a href="#here" onClick="movePage(\''+formID+'\', '+pageNavi.last+')">>></a>';		if (pageNavi.page_list.length<10)			naviObj.innerHTML += '<li><a href="#here" onClick="movePage(\''+formID+'\', '+pageNavi.page_list.length+')">&gt;</a></li>';				if (isIE && getInternetExplorerVersion() < 8.0)	naviObj.innerHTML += '<input type="hidden" name="page_no">';			} catch (e) {		alert(e);	}}//페이지 이동function movePage2(formID, pageNo) {	try {		//var formObj = document.getElementById(formID);//		if (isIE && getInternetExplorerVersion() < 8.0) {//			formObj.page_no.value = pageNo;//		} else {//			if (formObj.page_no == null) {//				addChildObject(formObj, "hidden", "page_no", pageNo);//			} else {//				formObj.page_no.value = pageNo;//			}//		}				$("#hid_page").val(pageNo);			$( "#frm_searchArea" ).attr("action", "");				$( "#frm_searchArea" ).submit();						//doSubmit(formObj);	} catch(e) {		alert(e);	}}
function addEvent( obj, evt, fn ) {    if ( typeof obj.attachEvent != 'undefined' ) {        obj.attachEvent( "on" + evt, fn );    } else if ( typeof obj.addEventListener != 'undefined' ) {        obj.addEventListener( evt, fn, false );    } else {        //      Do you want to support browser this old?        //      If so, you'll need to accomodate it here    }}function addChildObject(formObj, type, key, val) {	try {		var obj = eval("document."+ formObj.name + "." + key);		if (obj == null) {			obj = document.createElement('input');			obj.setAttribute('type', type);			obj.setAttribute('name', key);			obj.setAttribute('value', val);			formObj.appendChild(obj);		} else {			obj.value = val;		}	} catch (e) {//		alert(e);	}	return formObj;}function removeChildObject(formObj, key, target_name) {	try {		var obj = target_name==null?eval("document." + formObj.name + "." + key):eval(target_name + ".document." + formObj.name + "." + key);		if (obj != null) formObj.removeChild(obj);	} catch (e) {//		alert(e);	}	return formObj;}function removeChildObject(formObj, key, target_name) {	try {		var obj = eval("document."+ formObj.name + "." + key);		if (obj != null) formObj.removeChild(obj);	} catch (e) {//		alert(e);	}	return formObj;}function addChildObjectReplaceTag(formObj, type, key, value) {	value = replaceTagToPlain(value);	return addChildObject(formObj, type, key, value);}function replaceTagToPlain(value) {	if (value != null) {		value += "";		value = value.replace(/&#034;/gi, '"')		.replace(/&#039;/gi, "'")		.replace(/&lt;/gi, "<")		.replace(/&gt;/gi, ">")		.replace(/&amp;/gi, "&");	}	return value;}/** * select element 선택된 값 * @param element * @returns */function getSelectedValue(element) {	var index = element.selectedIndex;	return index >=0 ? element.options[index].value : null;}/** * 앞뒤의 공백 제거 */function trim(str){	str = str + "";	return str.replace( /(^\s*)|(\s*$)/g, "" );}/** * 값이 비었는지 확인 */function isEmpty(val) {    return ( ! trim( val ) );}function isCorrectFileFormat(strFormat, fileName) {	if (fileName == null || fileName == "") {		alert("파일명이 존재하지 않습니다.");		return false;	}	var idx = fileName.lastIndexOf(".");	if (idx < 0) {		alert("파일명의 확장자가 올바르지 않습니다.");		return false;	}	var fileExt = fileName.substring(idx+1).toLowerCase();	if (fileExt == null || fileExt == "") {		alert("파일명의 확장자가 올바르지 않습니다.");		return false;	}	if (strFormat.toLowerCase().indexOf(fileExt) < 0) {		alert(strFormat + " 형식의 파일만 올릴 수 있습니다.");		return false;	}	return true;}//문자열의 byte 수를 리턴하는 함수function byteCheck(code) {	var code_byte = 0;		for(var inx = 0; inx < code.length; inx++) {		var oneChar = escape(code.charAt(inx));				if(oneChar.length == 1) {			code_byte++;		} else if(oneChar.indexOf("%u") != -1) {			code_byte += 2;		} else if(oneChar.indexOf("%") != -1) {			code_byte += oneChar.length / 3;		}	}		return code_byte;}function ajaxPost(pUrl, param, callbackS, callbackF) {	$.ajax({    	type:"post",	        url: pUrl,        data: param,        encoding: 'UTF-8',        contentType: "application/x-www-form-urlencoded; charset=UTF-8",             success: callbackS,        error: callbackF    });     }function transJsonObj(param) {	var b = ajaxReturnMsgDecode(param);	return eval("("+b+")");}function ajaxReturnMsgDecode(msg) {	if (isEmpty(msg)) return "";	var a = decodeURIComponent(msg);	a = a.replace(/\+/g, ' ');	return a;}function eraseSpace(val) {	var space = /\s+/g;	val = val.replace(space, "");	return val;}function ajaxLoginCheck(jo) {	if (jo.rv == "gologin")	{		$(location).attr('href',"/ltt/login.do");		return false;	}		return true;}function restoreTag(value) {	if (value != null) {		value += "";		value = value.replace(/&#34;/gi, '"')		.replace(/&#39;/gi, "'")		.replace(/&#60;/gi, "<")		.replace(/&#43;/gi, "+")		.replace(/&#62;/gi, ">");			}	return value;}function restoreEnter(value) {	if (value != null) {		value += "";		value = value.replace(/<br>/gi, '\n');	}	return value;}//일반팝업 호출function openNormalPopup(param) {	defaultSettings = {	 centerBrowser:0, // center window over browser window? {1 (YES) or 0 (NO)}. overrides top and left	 centerScreen:0, // center window over entire screen? {1 (YES) or 0 (NO)}. overrides top and left	 height:500, // sets the height in pixels of the window.	 left:0, // left position when the window appears.	 location:0, // determines whether the address bar is displayed {1 (YES) or 0 (NO)}.	 menubar:0, // determines whether the menu bar is displayed {1 (YES) or 0 (NO)}.	 resizable:0, // whether the window can be resized {1 (YES) or 0 (NO)}. Can also be overloaded using resizable.	 scrollbars:0, // determines whether scrollbars appear on the window {1 (YES) or 0 (NO)}.	 status:0, // whether a status line appears at the bottom of the window {1 (YES) or 0 (NO)}.	 width:500, // sets the width in pixels of the window.	 windowName:null, // name of window set from the name attribute of the element that invokes the click	 windowURL:null, // url used for the popup	 top:0, // top position when the window appears.	 toolbar:0 // determines whether a toolbar (includes the forward and back buttons) is displayed {1 (YES) or 0 (NO)}.	};settings = jQuery.extend({}, defaultSettings, param || {});var windowFeatures =    'height=' + settings.height +',width=' + settings.width +',toolbar=' + settings.toolbar +',scrollbars=' + settings.scrollbars +',status=' + settings.status +',resizable=' + settings.resizable +',location=' + settings.location +',menuBar=' + settings.menubar;settings.windowName =  settings.windowName || this.name;settings.windowURL = settings.windowURL || this.href ;var centeredY,centeredX;if (settings.centerBrowser){ if ($.browser.msie) {   centeredY = (window.screenTop - 120) + ((((document.documentElement.clientHeight + 120)/2) - (settings.height/2)));   centeredX = window.screenLeft + ((((document.body.offsetWidth + 20)/2) - (settings.width/2))); } else {   centeredY = window.screenY + (((window.outerHeight/2) - (settings.height/2)));   centeredX = window.screenX + (((window.outerWidth/2) - (settings.width/2))); } window.open(settings.windowURL, settings.windowName, windowFeatures+',left=' + centeredX +',top=' + centeredY).focus();} else if (settings.centerScreen){ centeredY = (screen.height - settings.height)/2; centeredX = (screen.width - settings.width)/2; window.open(settings.windowURL, settings.windowName, windowFeatures+',left=' + centeredX +',top=' + centeredY).focus();} else { window.open(settings.windowURL, settings.windowName, windowFeatures+',left=' + settings.left +',top=' + settings.top).focus();}return false;}// 비밀번호 변경시 Alphabet & Number & 특수문자 Checkfunction charsTypeCheck(input) {	var l = 0; //Alphabet 갯수    var m = 0; //Number 갯수    var n = 0; //특수문자 갯수    var r = 0; //문자 타입 갯수    		for (var inx = 0; inx < input.length; inx++) {    	if (/[^a-zA-Z]/.test(input.charAt(inx))){        	if (/[^0-9]/.test(input.charAt(inx))){	       		if (/[^a-zA-Z0-9]/.test(input.charAt(inx))) n = n + 1	       		else 	       			return r;        	}else m = m + 1;       		    	}else l = l + 1;    }	if(l > 0) r++; 	if(m > 0) r++;	if(n > 0) r++;		return r;}/*---------------------------------------------- 타이머 시작 --------------------------------------------------*/var limitSec = 180;		// 제한 기준시간(초)var sec = limitSec;		// 제한시간(초)var timerObj = null;	// 타이머// 타이머 설정var timerControl = function(flag, timerArea, timer, btn, functionName) {	if(flag == "START") {		// 타이머 초기화		if(timerObj != null) {			timerControl("STOP");		}				// 타이머 DIV Display		$(timerArea).show();				timerObj = window.setInterval(function(){			sec -= 1;			var mm = Math.floor(sec/60);			var ss = sec%60;			mm = "0"+mm;			if(ss < 10){				ss = "0"+ss;			}			$(timer).text(mm+":"+ss);			// 제한시간 종료			if(sec <= 0) {				alert('입력 시간을 초과하였습니다.\n인증번호를 재요청 해주시기 바랍니다');								// 인증번호 재요청 버튼 활성화				$(btn).attr("href", functionName);				// Interval Clear				timerControl("STOP");			}					}, 1000);			} else {		clearInterval(timerObj);		sec = limitSec;		timerObj = null;	}};//숫자만 입력var checkNumber = function(objname, formname, msg) {	var regExp = /^\d+$/;	var str = $(objname, formname).val();//	var str = $(objname, formname).attr("value");	if (!regExp.test(str)) {		alert(msg);//		$(objname, formname).attr("value", "");		$(objname, formname).val("");		$(objname, formname).focus();		return false;	} else {		return true;	}};/*---------------------------------------------- 타이머 끝 ----------------------------------------------------*/